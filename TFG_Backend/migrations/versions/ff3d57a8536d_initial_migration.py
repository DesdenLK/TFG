"""Initial migration

Revision ID: ff3d57a8536d
Revises: 
Create Date: 2025-05-26 18:30:23.568374

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'ff3d57a8536d'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('uuid', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('password', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('terrains',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('uuid', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('isPublic', sa.Boolean(), nullable=False),
    sa.Column('heightmapResolution', sa.Integer(), nullable=False),
    sa.Column('widthmapResolution', sa.Integer(), nullable=False),
    sa.Column('size_X', sa.Integer(), nullable=False),
    sa.Column('size_Y', sa.Integer(), nullable=False),
    sa.Column('size_Z', sa.Integer(), nullable=False),
    sa.Column('creator', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['creator'], ['users.uuid'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('file_storage',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('terrain_uuid', sa.UUID(), nullable=False),
    sa.Column('uuid', sa.UUID(), nullable=False),
    sa.Column('filename', sa.String(length=255), nullable=False),
    sa.Column('filetype', sa.Enum('Texture', 'Heightmap', 'Avalanche', name='filetype'), nullable=False),
    sa.Column('file_data', sa.LargeBinary(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['terrain_uuid'], ['terrains.uuid'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('terrain_levels',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('uuid', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('terrain_uuid', sa.UUID(), nullable=False),
    sa.Column('start_X', sa.Float(), nullable=False),
    sa.Column('start_Y', sa.Float(), nullable=False),
    sa.Column('start_Z', sa.Float(), nullable=False),
    sa.Column('end_X', sa.Float(), nullable=False),
    sa.Column('end_Y', sa.Float(), nullable=False),
    sa.Column('end_Z', sa.Float(), nullable=False),
    sa.Column('creator', sa.UUID(), nullable=False),
    sa.Column('optimal_total3D_distance', sa.Float(), nullable=False),
    sa.Column('optimal_total2D_distance', sa.Float(), nullable=False),
    sa.Column('optimal_total_slope', sa.Float(), nullable=False),
    sa.Column('optimal_total_positive_slope', sa.Float(), nullable=False),
    sa.Column('optimal_total_negative_slope', sa.Float(), nullable=False),
    sa.Column('optimal_metabolic_cost', sa.Float(), nullable=False),
    sa.Column('optimal_total_avalanches', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['creator'], ['users.uuid'], ),
    sa.ForeignKeyConstraint(['terrain_uuid'], ['terrains.uuid'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('level_scores',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('uuid', sa.UUID(), nullable=False),
    sa.Column('level_uuid', sa.UUID(), nullable=False),
    sa.Column('user_uuid', sa.UUID(), nullable=False),
    sa.Column('total3D_distance', sa.Float(), nullable=False),
    sa.Column('total2D_distance', sa.Float(), nullable=False),
    sa.Column('total_slope', sa.Float(), nullable=False),
    sa.Column('total_positive_slope', sa.Float(), nullable=False),
    sa.Column('total_negative_slope', sa.Float(), nullable=False),
    sa.Column('metabolic_cost', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['level_uuid'], ['terrain_levels.uuid'], ),
    sa.ForeignKeyConstraint(['user_uuid'], ['users.uuid'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('optimal_path_points',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('uuid', sa.UUID(), nullable=False),
    sa.Column('level_uuid', sa.UUID(), nullable=False),
    sa.Column('index', sa.Integer(), nullable=False),
    sa.Column('point_X', sa.Float(), nullable=False),
    sa.Column('point_Y', sa.Float(), nullable=False),
    sa.Column('point_Z', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['level_uuid'], ['terrain_levels.uuid'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('uuid')
    )
    op.create_index('idx_level_uuid_index', 'optimal_path_points', ['level_uuid', 'index'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_level_uuid_index', table_name='optimal_path_points')
    op.drop_table('optimal_path_points')
    op.drop_table('level_scores')
    op.drop_table('terrain_levels')
    op.drop_table('file_storage')
    op.drop_table('terrains')
    op.drop_table('users')
    # ### end Alembic commands ###
